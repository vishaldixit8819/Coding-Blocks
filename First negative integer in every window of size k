/*

You are given given an array and a positive integer k, find the first negative integer for each and every window(contiguous subarray) of size k. If a window does not contain a negative integer, then print 0 for that window.

Input Format
First line contains integer t as number of test cases. Each test case contains two lines. First line contains two integers n and k where n is length of the array and k is the size of window and second line contains n space separated integer.

Constraints
1 < t < 10 1< n, k < 10000000

Output Format
For each test case you have to print the required output as given below.

Sample Input
2
8 3
12 -1 -7 8 -15 30 16 28
 8 4
12 -1 -7 8 -15 30 16 28
Sample Output
-1 -1 -7 -15 -15 0 
-1 -1 -7 -15 -15
Explanation
For first test case : Subarray of window size 3 is ( 12 -1 -7), (-1, -7, 8), and so on.. Take first negative number from each window and print them.

*/

// Code...

import java.util.*;
public class Main {
    public static void main(String args[]) {
       Scanner sc=new Scanner(System.in);
	 	int test=sc.nextInt();
		 while(test-->0)
		 {
			 int n1=sc.nextInt();
			 int a=sc.nextInt();
			 int arr[]=new int[n1];
			for(int i=0;i<arr.length;i++)
				arr[i]=sc.nextInt();
			 Deque<Integer> queue=new LinkedList<>();
			 int i=0;
			 while(i<arr.length)
			 {
				 if(arr[i]<0)
				 	queue.add(arr[i]);
				if(i+1>=a)
				{
					if(queue.isEmpty())
						System.out.print(0+" ");
					else{
					if(i-a>=0&&arr[i-a]==queue.peek())
						queue.remove();
						if(queue.isEmpty())
						System.out.print(0+" ");
						else
						System.out.print(queue.peek()+" ");
					}
					
					
				}
				 i++;
			 }
			 System.out.println();

		 }  
    }
}
