/*

Given an array of patterns containing only I’s and D’s. I for increasing and D for decreasing. Devise an algorithm to print the minimum number following that pattern. Digits from 1-9 and digits can’t repeat.

Input Format
The First Line contains an Integer N, size of the array. Next Line contains N Strings separated by space.

Constraints
1 ≤ T ≤ 100 1 ≤ Length of String ≤ 8

Output Format
Print the minimum number for each String separated by a new Line.

Sample Input
4
D I DD II
Sample Output
21
12
321 
123
Explanation
For the Given sample case, For a Pattern of 'D' print a decreasing sequence which is 2 1.

*/

// code...

import java.util.Scanner;
public class Main{
	public static void main(String[] args){
	    Scanner scan = new Scanner(System.in);
	    int number = scan.nextInt();
	    String[] arr1=new String[number];
	    for(int i=0; i<number; i++){
	        String s = scan.next();
	       	rec(s);
	    }
	}
	public static void rec(String arr1){
		int maximum=0, pq=0, xy;
		for (int i=0; i<arr1.length(); i++){
			int f=0;
			switch(arr1.charAt(i)){
				case 'I':
					xy=i+1;
					while(xy<arr1.length() && arr1.charAt(xy)=='D'){
						f++;
						xy++;
					}
					if(i==0){
						maximum=f+2;
						System.out.print(""+ ++pq);
						System.out.print(""+ maximum);
						pq=maximum;
					}
					else{
						maximum+=f+1;
						pq=maximum;
						System.out.print(""+ pq);
					}
					for(int k=0; k<f; k++){
						System.out.print("" + --pq);
						i++;
					}
					break;

				case 'D':
					if(i==0){
						xy=i+1;
						while(xy<arr1.length() && arr1.charAt(xy)=='D'){
							f++;
							xy++;
						}
						maximum=f+2;
						System.out.print(""+maximum+""+(maximum - 1));
						pq=maximum-1;
					}
					else{
						System.out.print("" + (pq - 1));
						pq--;
					}
					break;
			}
		}
		System.out.println();
	}
	
}
