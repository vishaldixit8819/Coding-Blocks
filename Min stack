/*

Design a stack that supports push,pop,top,retrieving the minimum element in constant time.

Input Format
First line of input contains integer n denoting the size of the string array. Next line of input contains n space separated string where i-th string represent i-th operation.(i.e, push,pop,top,getMin)

Constraints
Functions pop, top and getMin operations will always be called on non-empty stacks.

Output Format
Print the answer according to input operations.

Sample Input
7
push push push getMin pop top getMin
-2 0 -3
Sample Output
-3 0 -2 
Explanation
push -2
push 0
push -3
print -3 (getMin)
pop -3
print 0 (top)
print -2 (getMin)

*/

// code...

import java.util.*;
class sStack{
		static Stack<Integer> st;

		static int min;
		sStack()
		{
			min=0;
			st=new Stack<>();
		}

		public void push(int i)
		{
			if(st.isEmpty())
			{
				min=i;
				st.push(i);
			}
			else{
				if(min<i)
				{
					st.push(i);
				}else{
					st.push(2*i-min);
					min=i;
				}
			}
		}
		void pop()
		{
			if(st.size()==0)
				return ;		
		else{
			if(st.peek()>=min)
				st.pop();
			else{
			
				min=2*min-st.peek();
				st.pop();
			}
		}}
		int getmin(){
			return min;
		}		
		int top()
		{
			if(st.size()==0)
				return -1;
			else{
				if(min<=st.peek())
					return st.peek();
				else{
					return min;
				}
			}
		}
	}
public class Main {
    public static void main (String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		String arr[]=new String[n];
		int s=0;
		for(int i=0;i<arr.length;i++){
			arr[i]=sc.next();
			if(arr[i].equals("push"))
				s++;
			}
		int arr1[]=new int[s];
		for(int i=0;i<s;i++)
			arr1[i]=sc.nextInt();
		int j=0;
		sStack ss=new sStack();
		for(int i=0;i<n;i++)
		{
			if(arr[i].equals("push"))
			{
			
				ss.push(arr1[j++]);
			}
			else if(arr[i].equals("getMin"))
			{
				System.out.print(ss.getmin()+" ");
			}
			else if(arr[i].equals("top"))
			{
				System.out.print(ss.top()+" ");
			}
			else if(arr[i].equals("pop")){
				
					ss.pop();
			}
			else{
				System.out.println("failure");
			}
		}
		

    }
}
