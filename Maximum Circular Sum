/*

You are provided n numbers (both +ve and -ve). Numbers are arranged in a circular form. You need to find the maximum sum of consecutive numbers.

Input Format
First line contains integer t which is number of test case.
For each test case, it contains an integer n which is the size of array and next line contains n space separated integers denoting the elements of the array.

Constraints
1<=t<=100
1<=n<=1000
|Ai| <= 10000

Output Format
Print the maximum circular sum for each testcase in a new line.

Sample Input
1
7
8 -8 9 -9 10 -11 12

Sample Output
22

Explanation
Maximum Circular Sum = 22 (12 + 8 - 8 + 9 - 9 + 10)

*/

// Code...

import java.util.*;
public class Main {
	 public static int mcs(int[] arr){
       int totalsum=0;
       for(int i=0;i<arr.length;i++){
           totalsum+=arr[i];
       }
       int sum=0,maxsum=0,msum=0,minsum=0;
       for(int i=0;i<arr.length;i++){
           sum=Math.max(arr[i],sum+arr[i]);
           maxsum=Math.max(sum,maxsum);
           
               msum=Math.min(arr[i],msum+arr[i]);
               minsum=Math.min(msum,minsum);
           
       }
        
        if(minsum==totalsum){
            return maxsum;
        }
        return Math.max(maxsum,totalsum-minsum);
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0){
            int n=sc.nextInt();
            int[] arr=new int[n];
            for(int i=0;i<n;i++){
                arr[i]=sc.nextInt();
            }
            System.out.println(mcs(arr));
        }
    }
    }
