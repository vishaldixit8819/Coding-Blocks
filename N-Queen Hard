/*

You are given an empty chess board of size N*N. Find the number of ways to place N queens on the board, such that no two queens can kill each other in one move. A queen can move vertically, horizontally and diagonally.

Input Format
A single integer N, denoting the size of chess board.

Constraints
1 â‰¤ N < 15

Output Format
A single integer denoting the count of solutions.

Sample Input
4

Sample Output
2

*/

// Code..

import java.util.*;
public class Main {
	static int ans=0;
    public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		boolean[][] board=new boolean[n][n];
		printpath(board,0,n);
		System.out.println(ans);
    }
	public static void printpath(boolean[][] board,int row,int tq){
		if(tq==0) {			
			ans++;
			return;
		}
		if(row>=board.length) {
			return;
		}
		for(int c=0;c<board.length;c++) {
			if(isitPossible(board,row,c)==true){
				board[row][c]=true;
				printpath(board,row+1,tq-1);
				board[row][c]=false;;
			}
		}
	}
	public static void display(boolean[][] board) {
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length;j++) {
				System.out.print(board[i][j]);
			}
			System.out.println();
		}
	}
	public  static boolean isitPossible(boolean[][] board, int row, int c) {
		// row
		int r=row;
		while(r>=0) {
			if(board[r][c]==true) {
				return false;
			}
			r--;
		}
		// left diagonal
		int lr=row;
		int lc=c;
		while(lr>=0 && lc>=0) {
			if(board[lr][lc]==true) {
				return false;
			}
			lr--;
			lc--;
		}
		
		// right diagonal	
		int rr=row;
		int rc=c;
		while(rr>=0 && rc<board.length) {
			if(board[rr][rc]==true) {
				return false;
			}
			rr--;
			rc++;
		}
		return true;
	}
}
